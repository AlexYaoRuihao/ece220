#include <stdio.h>
#include <stdlib.h>
#include <math.h>

double abs_double(double y)
{
    //Change this to return the absolute value of y i.e |y|
    double k = fabs(y);
    return k;
}

double fx_val(double a, double b, double c, double d, double e, double x)
{
    //Change this to return the value of the polynomial at the value x
    double result=a*pow(x,4)+b*pow(x,3)+c*pow(x,2)+d*x+e;
    return result;
}

double fx_dval(double a, double b, double c, double d, double e, double x)
{
    //Change this to return the value of the derivative of the polynomial at the value x
    double result=4*a*pow(x,3)+3*b*pow(x,2)+2*c*x+d;
    return result;
}

double fx_ddval(double a, double b, double c, double d, double e, double x)
{
    //Change this to return the value of the double derivative of the polynomial at the value x
    double result=12*a*pow(x,2)+6*b*x+2*c;
    return result;
}


double newrfind_halley(double a, double b, double c, double d, double e, double x)
{
    //Change this to return the root found starting from the initial point x using Halley's method
    double up,down,xn,z;
    int count = 0;

    while (count != 10000){

        up = 2*fx_val(a,b,c,d,e,x)*fx_dval(a,b,c,d,e,x);
        down = 2*pow(fx_dval(a,b,c,d,e,x),2)-fx_val(a,b,c,d,e,x)*fx_ddval(a,b,c,d,e,x);
        xn = x - (up/down);
        z = xn-x;
        z=abs_double(z);
        x=xn;
        if (z <=0.000001){
            printf("Root found: %lf\n", x); 
            return x;
            break;
        }
        count++;
    }
    printf("No roots found.");
    return 314;
}

int rootbound(double a, double b, double c, double d, double e, double r, double l)
{
    //Change this to return the upper bound on the number of roots of the polynomial in the interval (l, r)
    int vl=0;

    if (((a>0) && (4*a*l+b<0))||((a<0) && (4*a*l+b>0))){
        vl++;
    }

    if (((6*a*pow(l,2)+3*b*l+c>0) && (4*a*l+b<0))||((6*a*pow(l,2)+3*b*l+c<0) && (4*a*l+b>0))){
        vl++;
    }
   
    if (((6*a*pow(l,2)+3*b*l+c>0) && (4*a*pow(l,3)+3*b*pow(l,2)+2*c*l+d<0))||((6*a*pow(l,2)+3*b*l+c<0) && (4*a*pow(l,3)+3*b*pow(l,2)+2*c*l+d>0))){
        vl++;
    }
   
    if (((a*pow(l,4)+3*b*pow(l,3)+c*pow(l,2)+d*l+e>0) && (4*a*pow(l,3)+3*b*pow(l,2)+2*c*l+d<0))||((a*pow(l,4)+3*b*pow(l,3)+c*pow(l,2)+d*l+e<0) && (4*a*pow(l,3)+3*b*pow(l,2)+2*c*l+d>0))){
        vl++;
    }
    
    int vr=0;

    if (((a>0) && (4*a*r+b<0))||((a<0) && (4*a*r+b>0))){
        vr++;
    }

    if (((6*a*pow(r,2)+3*b*r+c>0) && (4*a*r+b<0))||((6*a*pow(r,2)+3*b*r+c<0) && (4*a*r+b>0))){
        vr++;
    }
   
    if (((6*a*pow(r,2)+3*b*r+c>0) && (4*a*pow(r,3)+3*b*pow(r,2)+2*c*r+d<0))||((6*a*pow(r,2)+3*b*r+c<0) && (4*a*pow(r,3)+3*b*pow(r,2)+2*c*r+d>0))){
        vr++;
    }
   
    if (((a*pow(r,4)+3*b*pow(r,3)+c*pow(r,2)+d*r+e>0) && (4*a*pow(r,3)+3*b*pow(r,2)+2*c*r+d<0))||((a*pow(r,4)+3*b*pow(r,3)+c*pow(r,2)+d*r+e<0) && (4*a*pow(r,3)+3*b*pow(r,2)+2*c*r+d>0))){
        vr++;
    }

    int diff = vl - vr;

    diff = abs_double(diff);

    if (diff == 0)
    {
        printf("The polynomial has no roots in the given interval.");
        return 0;
    }
    else {
        return diff;
    }
}

int main(int argc, char **argv)
{
	double a, b, c, d, e, l, r;
	FILE *in;

	if (argv[1] == NULL) {
		printf("You need an input file.\n");
		return -1;
	}
	in = fopen(argv[1], "r");
	if (in == NULL)
		return -1;
	fscanf(in, "%lf", &a);
	fscanf(in, "%lf", &b);
	fscanf(in, "%lf", &c);
	fscanf(in, "%lf", &d);
	fscanf(in, "%lf", &e);
	fscanf(in, "%lf", &l);
	fscanf(in, "%lf", &r);
    
    //The values are read into the variable a, b, c, d, e, l and r.
    //You have to find the bound on the number of roots using rootbound function.
    //If it is > 0 try to find the roots using newrfind function.
    //You may use the fval, fdval and fddval funtions accordingly in implementing the halleys's method.
    int checkbound = rootbound(a,b,c,d,e,r,l);
    if (checkbound ==0 )
    {
        return 0;
    }    
    double x = l;
    double root;
    while (x<=r)
    {
        root= newrfind_halley(a,b,c,d,e,x);
        x = x+0.5;
    }
    fclose(in);
    
    return 0;
}
