;Intro Paragraph of MP2:
;
;
.ORIG x3000

;your code goes here
Read_Input
;IN
GETC                                                             ;get a character from the keyboard
OUT         																										 ;print out the character that I just entered onto the console
LD R1,Equal_ASCII                                                ;Check if the character that I just input is "=" or not
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1                                        					 ;R1 = R0 - R1; check if it's "=" sign
BRz Check_Stack   																							 ;Check if stack has only one value

LD R1, Space_ASCII                                               ;Check if the character that I just input is " " or not
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1                                                   ;R1 = R0 - R1; check if it's space character
BRz Read_Input
JSR EVALUATE     																								 ;Jump to EVALUATE subroutine

;The Check_Stack branch serves to check if there  is only one value left inside the
;stack whenever equal sign is beig input. If there is only one value left inside the
;stack which is at x4000, this is the result of our calculator. If there are more than
;one values in the stack, the expression is invalid.
Check_Stack
LD R6, STACK_TOP
LD R5, Only_One_Value
NOT R5, R5
ADD R5, R5, #1
ADD R5, R6, R5
BRz Load_Result
LEA R0, Warning_Expression_1
PUTS
BRnzp DONE
Load_Result
LDI R5, Result
JSR PRINT_HEX
BRnzp DONE



;Values needed by the main program
Equal_ASCII .FILL x003D
Space_ASCII .FILL x0020
Only_One_Value .FILL x3FFF
Result .FILL x4000
Warning_Expression_1 .STRINGZ "Invalid Expression"
Number_Offset .FILL x0030
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;PRINT_HEX Subroutine Intro:
;The code starting at PRINT_HIST basically serves to iterate through and print out
;the numbers stored from x3F00. The approach that I use is to divide the 16bits into
;4 groups of 4 bits and use a group counter and a bit counter. When the bit counter
;goes to zero, I print out its hexadecimal representation. I compare the 4bits with #9 and
;add a different ASCII value to them separately to accomplish this task.

;R3- value to print in hexadecimal
PRINT_HEX
;Store required registers
ST R5, PRINT_HEX_Save_R5
ST R2, PRINT_HEX_Save_R2
ST R3, PRINT_HEX_Save_R3
ST R4, PRINT_HEX_Save_R4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SMALL_LOOP
AND R2, R2, #0                       ;initialize R2
ADD R2, R2, #4                       ;R2 as the group counter
BRnzp BITS_LOOP                      ;Go to BITS_LOOP
GROUP_LOOP
ADD R2, R2, #-1                      ;Decrement the group counter
BRz Done_With_PRINT_HEX
BITS_LOOP
AND R4, R4, #0                       ;R4 is used to store digits
AND R3, R3, #0                       ;initialize R3 as the bits counter
ADD R3, R3, #4                       ;Set R3 to contain value of 4
BITS_INNER_LOOP
ADD R3, R3, #0                       ;Repeat R3
BRz PRINTLOOP
ADD R4, R4, R4                       ;Shift R4 left by 1 bit
ADD R5, R5, #0                       ;Repeat R5
BRn OneAtFront                       ;If 1 is detected, go to OneAtFront
ADD R4, R4, #0                       ;Add the digit of 0 to R4

BRnzp Shift_loop                     ;Go to Shift_loop
OneAtFront
ADD R4, R4, #1                       ;Add the digit of 1 to R4

Shift_loop
ADD R5, R5, R5                       ;Shift R5 to the left by 1 bit
ADD R3, R3, #-1                      ;Decrement the bits counter
BRnzp BITS_INNER_LOOP                ;Go to BITS_INNER_LOOP

;PRINTLOOP is used to print the 4 digits ready stored inside R4 in a hexadecimal digit
PRINTLOOP
ADD R4, R4, #-9                      ;Decrement R4 by #9
BRnz DIGIT_CASE                      ;If it's zero and negative, go to DIGIT_CASE
ALPHABET_CASE
ADD R4, R4, #9                       ;Add back R4 the value of #9
LD R0, AMinus10_ASCII                ;Load R0 with AMinus10_ASCII's ASCII value
ADD R0, R0, R4                       ;Set R0 to contain the value in R4
ST R7, PRINT_HEX_Save_R7
OUT
LD R7, PRINT_HEX_Save_R7
BRnzp GROUP_LOOP
DIGIT_CASE
ADD R4, R4, #9                       ;Add back R4 the value of #9
LD R0, ZERO_ASCII                    ;Load R0 with ZERO_ASCII's ASCII value
ADD R0, R0, R4                       ;Add R4's value to R0
ST R7, PRINT_HEX_Save_R7
OUT
LD R7, PRINT_HEX_Save_R7
BRnzp GROUP_LOOP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Done_With_PRINT_HEX
LD R5, PRINT_HEX_Save_R5
LD R2, PRINT_HEX_Save_R2
LD R3, PRINT_HEX_Save_R3
LD R4, PRINT_HEX_Save_R4
RET

;Values needed by the PRINT_HEX subroutine and declare memory lovations needed
PRINT_HEX_Save_R5 .BLKW #1
PRINT_HEX_Save_R4 .BLKW #1
PRINT_HEX_Save_R3 .BLKW #1
PRINT_HEX_Save_R2 .BLKW #1
PRINT_HEX_Save_R7 .BLKW #1
;ZERO_ASCII .FILL x0030               ;ASCII value of 0
AMinus10_ASCII .FILL x0037           ;ASCII value of 'A'-10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;EVALUATE Subroutine Intro:
;This subroutine basically serves to compare the values I input with 0 to 9 and
;all of the operated including +, -, *, / and ^. If the input doesn't match all of them,
;the things we entered are invalid. If we detect a number is being entered, we push
;it into the stack. If we detect an operator is being entered, we pop two values out
;of the stack.


;R0 - character input from keyboard
;R6 - current numerical output
EVALUATE

;your code goes here

LD R2, Number_Offset
NOT R2, R2
ADD R2, R2, #1
Check_Zero
LD R1, Zero_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's 0
BRnp Check_One
ST R7, Check_Zero_Save_R7
ADD R0, R0, R2
JSR PUSH
LD R7, Check_Zero_Save_R7
BRnzp Read_Input

Check_One
LD R1, One_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's 1
BRnp Check_Two
ST R7, Check_One_Save_R7
ADD R0, R0, R2
JSR PUSH
LD R7, Check_One_Save_R7
BRnzp Read_Input

Check_Two
LD R1, Two_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's 2
BRnp Check_Three
ST R7, Check_Two_Save_R7
ADD R0, R0, R2
JSR PUSH
LD R7, Check_Two_Save_R7
BRnzp Read_Input

Check_Three
LD R1, Three_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's 3
BRnp Check_Four
ST R7, Check_Three_Save_R7
ADD R0, R0, R2
JSR PUSH
LD R7, Check_Three_Save_R7
BRnzp Read_Input

Check_Four
LD R1, Four_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's 4
BRnp Check_Five
ST R7, Check_Four_Save_R7
ADD R0, R0, R2
JSR PUSH
LD R7, Check_Four_Save_R7
BRnzp Read_Input

Check_Five
LD R1, Five_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's 5
BRnp Check_Six
ST R7, Check_Five_Save_R7
ADD R0, R0, R2
JSR PUSH
LD R7, Check_Five_Save_R7
BRnzp Read_Input

Check_Six
LD R1, Six_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's 6
BRnp Check_Seven
ST R7, Check_Six_Save_R7
ADD R0, R0, R2
JSR PUSH
LD R7, Check_Six_Save_R7
BRnzp Read_Input

Check_Seven
LD R1, Seven_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's 7
BRnp Check_Eight
ST R7, Check_Seven_Save_R7
ADD R0, R0, R2
JSR PUSH
LD R7, Check_Seven_Save_R7
BRnzp Read_Input

Check_Eight
LD R1, Eight_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's 8
BRnp Check_Nine
ST R7, Check_Eight_Save_R7
ADD R0, R0, R2
JSR PUSH
LD R7, Check_Eight_Save_R7
BRnzp Read_Input

Check_Nine
LD R1, Nine_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's 9
BRnp Check_Plus
ST R7, Check_Nine_Save_R7
ADD R0, R0, R2
JSR PUSH
LD R7, Check_Nine_Save_R7
BRnzp Read_Input

;Values needed by detecting numbers from 0 to 9
Zero_ASCII    .FILL x0030
One_ASCII     .FILL x0031
Two_ASCII     .FILL x0032
Three_ASCII   .FILL x0033
Four_ASCII    .FILL x0034
Five_ASCII    .FILL x0035
Six_ASCII     .FILL x0036
Seven_ASCII   .FILL x0037
Eight_ASCII   .FILL x0038
Nine_ASCII    .FILL x0039

Check_Zero_Save_R7 .BLKW #1
Check_One_Save_R7 .BLKW #1
Check_Two_Save_R7 .BLKW #1
Check_Three_Save_R7 .BLKW #1
Check_Four_Save_R7 .BLKW #1
Check_Five_Save_R7 .BLKW #1
Check_Six_Save_R7 .BLKW #1
Check_Seven_Save_R7 .BLKW #1
Check_Eight_Save_R7 .BLKW #1
Check_Nine_Save_R7 .BLKW #1

;Check if input is operator
Check_Plus
LD R1, Plus_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's +
BRnp Check_Minus
Plus_Pop_First_Value
ST R7, Check_Plus_Save_R7_First_Value
JSR POP
LD R7, Check_Plus_Save_R7_First_Value
;ADD R3, R3, R0          ;Pop out the first number
LDI R3, STACK_TOP
ADD R5, R5, #0          ;Check R5 for underflow
BRz Plus_Pop_Second_Value
LEA R0, Warning_Expression
PUTS
BRnzp DONE
Plus_Pop_Second_Value
ST R7, Check_Plus_Save_R7_Second_Value
JSR POP
LD R7, Check_Plus_Save_R7_Second_Value
;ADD R4, R4, R0          ;Pop out the second number
LDI R4, STACK_TOP
ADD R5, R5, #0          ;Check R5 for underflow
BRz Apply_Operand_Plus
LEA R0, Warning_Expression
PUTS
BRnzp DONE
Apply_Operand_Plus
ST R7, Check_plus_Apply_Operand_Plus_Save_R7
JSR PLUS
LD R7, Check_plus_Apply_Operand_Plus_Save_R7
ST R7, Check_PLus_Push_Result_Save_R7
JSR PUSH
LD R7, Check_PLus_Push_Result_Save_R7
Read_Input_1
BRnzp Read_Input
STACK_TOP	.FILL x4000	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DONE HALT
Check_Minus
LD R1, Minus_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's -
BRnp Check_Multiply
Minus_Pop_First_Value
ST R7, Check_Minus_Save_R7_First_Value
JSR POP
LD R7, Check_Minus_Save_R7_First_Value
;ADD R4, R4, R0           ;Pop out the first number
LDI R4, STACK_TOP
ADD R5, R5, #0           ;Check R5 for underflow
BRz Minus_Pop_Second_Value
LEA R0, Warning_Expression
PUTS
BRnzp DONE
Minus_Pop_Second_Value
ST R7, Check_Minus_Save_R7_Second_Value
JSR POP
LD R7, Check_Minus_Save_R7_Second_Value
;ADD R3, R3, R0          ;Pop out the second number
LDI R3, STACK_TOP
ADD R5, R5, #0          ;Check R5 for underflow
BRz Apply_Operand_Minus
LEA R0, Warning_Expression
PUTS
BRnzp DONE
Apply_Operand_Minus
ST R7, Check_Minus_Apply_Operand_Minus_Save_R7
JSR MIN
LD R7, Check_Minus_Apply_Operand_Minus_Save_R7
ST R7, Check_Minus_Push_Result_Save_R7
JSR PUSH
LD R7, Check_Minus_Push_Result_Save_R7
BRnzp Read_Input_1

Check_Multiply
LD R1, Multiply_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's *
BRnp Check_Divide
Multiply_Pop_First_Value
ST R7, Check_Multiply_Save_R7_First_Value
JSR POP
LD R7, Check_Multiply_Save_R7_First_Value
;ADD R3, R3, R0
LDI R3, STACK_TOP
ADD R5, R5, #0
BRz Multiply_Pop_Second_Value
LEA R0, Warning_Expression
PUTS
BRnzp DONE
Multiply_Pop_Second_Value
ST R7, Check_Multiply_Save_R7_Second_Value
JSR POP
LD R7, Check_Multiply_Save_R7_Second_Value
;ADD R4, R4, R0
LDI R4, STACK_TOP
ADD R5, R5, #0
BRz Apply_Operand_Multiply
LEA R0, Warning_Expression
PUTS
BRnzp DONE
Apply_Operand_Multiply
ST R7, Check_Multiply_Apply_Operand_Multiply_Save_R7
JSR MUL
LD R7, Check_Multiply_Apply_Operand_Multiply_Save_R7
ST R7, Check_Multiply_Push_Result_Save_R7
JSR PUSH
LD R7, Check_Multiply_Push_Result_Save_R7
BRnzp Read_Input_1

Check_Divide
LD R1, Divide_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's /
BRnp Check_Power
Divide_Pop_First_Value
ST R7, Check_Divide_Save_R7_First_Value
JSR POP
LD R7, Check_Divide_Save_R7_First_Value
;ADD R4, R4, R0
LDI R4, STACK_TOP
ADD R5, R5, #0
BRz Divide_Pop_Second_Value
LEA R0, Warning_Expression
PUTS
BRnzp DONE
Divide_Pop_Second_Value
ST R7, Check_Divide_Save_R7_Second_Value
JSR POP
LD R7, Check_Divide_Save_R7_Second_Value
;ADD R3, R3, R0
LDI R3, STACK_TOP
ADD R5, R5, #0
BRz Apply_Operand_Divide
LEA R0, Warning_Expression
PUTS
BRnzp DONE
Apply_Operand_Divide
ST R7, Check_Divide_Apply_Operand_Divide_Save_R7
JSR DIV
LD R7, Check_Divide_Apply_Operand_Divide_Save_R7
ST R7, Check_Divide_Push_Result_Save_R7
JSR PUSH
LD R7, Check_Divide_Push_Result_Save_R7
BRnzp Read_Input_1

Check_Power
LD R1, Power_ASCII
NOT R1, R1
ADD R1, R1, #1
ADD R1, R0, R1     ;R1 = R0 - R1; check if it's ^
BRnp Invalid_Input
Power_Pop_First_Value
ST R7, Check_Power_Save_R7_First_Value
JSR POP
LD R7, Check_Power_Save_R7_First_Value
;ADD R4, R4, R0
LDI R4, STACK_TOP
ADD R5, R5, #0
BRz Power_Pop_Second_Value
LEA R0, Warning_Expression
PUTS
BRnzp DONE
Power_Pop_Second_Value
ST R7, Check_Power_Save_R7_Second_Value
JSR POP
LD R7, Check_Power_Save_R7_Second_Value
;ADD R3, R3, R0
LDI R3, STACK_TOP
ADD R5, R5, #0
BRz Apply_Operand_Power
LEA R0, Warning_Expression
PUTS
BRnzp DONE
Apply_Operand_Power
ST R7, Check_Power_Apply_Operand_Power_Save_R7
JSR EXP
LD R7, Check_Power_Apply_Operand_Power_Save_R7
ST R7, Check_Power_Push_Result_Save_R7
JSR PUSH
LD R7, Check_Power_Push_Result_Save_R7
BRnzp Read_Input_1

Invalid_Input
LEA R0, Warning_Expression
PUTS
BRnzp DONE

;Values needed to detect operators and declare memory blocks needed
Plus_ASCII    .FILL x002B
Minus_ASCII   .FILL x002D
Multiply_ASCII.FILL x002A
Divide_ASCII  .FILL x002F
Power_ASCII   .FILL x005E

Check_Plus_Save_R7_First_Value .BLKW #1
Check_Plus_Save_R7_Second_Value .BLKW #1
Check_plus_Apply_Operand_Plus_Save_R7 .BLKW #1
Check_PLus_Push_Result_Save_R7 .BLKW #1

Check_Minus_Save_R7_First_Value .BLKW #1
Check_Minus_Save_R7_Second_Value .BLKW #1
Check_Minus_Apply_Operand_Minus_Save_R7 .BLKW #1
Check_Minus_Push_Result_Save_R7 .BLKW #1

Check_Multiply_Save_R7_First_Value .BLKW #1
Check_Multiply_Save_R7_Second_Value .BLKW #1
Check_Multiply_Apply_Operand_Multiply_Save_R7 .BLKW #1
Check_Multiply_Push_Result_Save_R7 .BLKW #1

Check_Divide_Save_R7_First_Value .BLKW #1
Check_Divide_Save_R7_Second_Value .BLKW #1
Check_Divide_Apply_Operand_Divide_Save_R7 .BLKW #1
Check_Divide_Push_Result_Save_R7 .BLKW #1

Check_Power_Save_R7_First_Value .BLKW #1
Check_Power_Save_R7_Second_Value .BLKW #1
Check_Power_Apply_Operand_Power_Save_R7 .BLKW #1
Check_Power_Push_Result_Save_R7 .BLKW #1

Warning_Expression .STRINGZ "Invalid Expression"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;input R3, R4
;out R0
PLUS

ADD R0, R3, R4

RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;input R3, R4
;out R0
MIN

NOT R4, R4
ADD R4, R4, #1
ADD R0, R3, R4

RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;input R3, R4
;out R0
MUL
;your code goes here

AND R0, R0, #0
Multiply
ADD R0, R3, R0
ADD R4, R4, #-1
BRnp Multiply

RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;input R3, R4
;out R0
DIV

AND R0, R0, #0

NOT R4, R4
ADD R4, R4, #1

Divide
ADD R0, R0, #1
ADD R3, R3, R4
BRzp Divide
ADD R0, R0, #-1
RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;input R3, R4
;out R0
EXP
;Now R3 is the base and R4 is the power
ST R1, EXP_Save_R1
;AND R1, R1, #0
ST R5, EXP_Save_R5
AND R0, R0, #0
ST R3, EXP_Save_R3
ADD R3, R3, #-1
BRz Base_Is_1
ADD R3, R3, #1  ;Add the value back

ADD R0, R3, R0 ;Bring R3 into R0
ADD R4, R4, #-1
BRz Done_With_EXP
Exponential_Loop1
LD R5, EXP_Save_R3
ADD R5, R5, #-1

AND R1, R1, #0
ADD R1, R0, R1     ;Bring R0 to R1
Exponential_Loop2
ADD R0, R1, R0 ;Add R0 to itself
ADD R5, R5, #-1
BRnp Exponential_Loop2
ADD R4, R4, #-1
BRnp Exponential_Loop1

LD R5, EXP_Save_R5

LD R1, EXP_Save_R1
Done_With_EXP
RET
Base_Is_1
ADD R0, R0, #1
BRnzp Done_With_EXP

EXP_Save_R3 .BLKW #1
EXP_Save_R5 .BLKW #1
EXP_Save_R1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;IN:R0, OUT:R5 (0-success, 1-fail/overflow)
;R3: STACK_END R4: STACK_TOP
;
PUSH
	ST R3, PUSH_SaveR3	;save R3
	ST R4, PUSH_SaveR4	;save R4
	AND R5, R5, #0		;
	LD R3, STACK_END	;
	LD R4, STACk_TOP	;
	ADD R3, R3, #-1		;
	NOT R3, R3		;
	ADD R3, R3, #1		;
	ADD R3, R3, R4		;
	BRz OVERFLOW		;stack is full
	STR R0, R4, #0		;no overflow, store value in the stack
	ADD R4, R4, #-1		;move top of the stack
	ST R4, STACK_TOP	;store top of stack pointer
	BRnzp DONE_PUSH		;
OVERFLOW
	ADD R5, R5, #1		;
DONE_PUSH
	LD R3, PUSH_SaveR3	;
	LD R4, PUSH_SaveR4	;
	RET


PUSH_SaveR3	.BLKW #1	;
PUSH_SaveR4	.BLKW #1	;


;OUT: R0, OUT R5 (0-success, 1-fail/underflow)
;R3 STACK_START R4 STACK_TOP
;
POP
	ST R3, POP_SaveR3	;save R3
	ST R4, POP_SaveR4	;save R3
	AND R5, R5, #0		;clear R5
	LD R3, STACK_START	;
	LD R4, STACK_TOP	;
	NOT R3, R3		;
	ADD R3, R3, #1		;
	ADD R3, R3, R4		;
	BRz UNDERFLOW		;
	ADD R4, R4, #1		;
	LDR R0, R4, #0		;
	ST R4, STACK_TOP	;
	BRnzp DONE_POP		;
UNDERFLOW
	ADD R5, R5, #1		;
DONE_POP
	LD R3, POP_SaveR3	;
	LD R4, POP_SaveR4	;
	RET


POP_SaveR3	.BLKW #1	;
POP_SaveR4	.BLKW #1	;
STACK_END	.FILL x3FF0	;
STACK_START	.FILL x4000	;
;STACK_TOP	.FILL x4000	;


.END
